# -*- coding: utf-8 -*-
"""process_data _and _convert_to_degrees

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9Nn-iUhv_kiK84DIpweKFiZemYfGPyI
"""

import csv
from astropy.io import fits

__all__ = ['process_data', 'convert_to_degrees']

def process_data(input_file, file_name, ra_degrees, dec_degrees, header):
  """

  This function searches for an object in a given csv file based on its right ascension
  and declination. If the object is not found, it prints out "Star not found".
  Otherwise, it writes out the information requested by the user in a new file provided
  by the user.

  Parameters:

  input_file: csv file
  Csv file where to conduct the search.

  file_name: path
  Path to the file where the user wishes to store retrived information.

  ra_degrees:
  Right ascension in units of time of the object under consideration.

  dec_degrees:
  Declination in units of time of the object under consideration.

  header: string
  Csv file header to specify the colum from which to retrive the object's information.

  """

  output_file = file_name
  filtered_rows = []

  with open(input_file, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            ra = eval(row['ra'])
            dec = eval(row['dec'])
            if round(float(ra), 4) == round(float(ra_degrees), 4) and round(float(dec), 4) == round(float(dec_degrees), 4):
                filtered_rows.append(row)

  if not filtered_rows:
        print("Star not found.")
  else:
       with open(output_file, 'w', newline ='') as fil:
          writer = csv.DictWriter(fil, fieldnames = header)
          writer.writeheader()
          writer.writerows(filtered_rows)

       print(f"Filtered data saved to {output_file}")

def convert_to_degrees(star_file, search_file1, file_name_1, search_file2 = None, file_name_2 = None):
  """

  This function converts right ascension and declination input in units of time to degrees.

  Parameters:

  star_file: path
  Path to the fits file with the object under consideration.

  search_file1: path
  Path to the file where to search for the object.

  file_name_1: path
  Path to the file where the user wishes to store retrived information.

  search_file2: path (optional), default is None
  Path to the second file (if any) where to search for the object.

  file_name_2: path (optional), default is None
  Path to the second file where the user wishes to store retrived information if
  search_file2 is not None and the object is found in search_file2.

  Returns:

  ra_degrees:
  Right ascension in degrees.

  dec_sign * dec_degrees:
  Declination in degrees.

  """
  hdu = fits.open(star_file)[0]
  ra_str, dec_str = hdu.header['RA'], hdu.header['DEC']
  print('RA:', ra_str)
  print('DEC:', dec_str)

  # Convert RA from HH:MM:SS.SS to degrees.
  ra_hours, ra_minutes, ra_seconds = map(float, ra_str.split(':'))
  ra_degrees = (ra_hours + ra_minutes/60 + ra_seconds/3600) * 15  # 15 degrees per hour.

  # Convert DEC from HH:MM:SS.SS to degrees.
  dec_parts = dec_str.split(':')
  dec_sign = -1 if dec_parts[0][0] == '-' else 1  # Check if DEC is negative.
  dec_degrees = abs(float(dec_parts[0])) + float(dec_parts[1]) / 60 + float(dec_parts[2]) / 3600

  file1 = open(search_file1, 'r')
  header_1 = file1.readline().strip().split(',')
  file2 = open(search_file2, 'r')
  header_2 = file2.readline().strip().split(',')

  process_data(search_file1, file_name_1, ra_degrees, dec_sign * dec_degrees, header_1)
  process_data(search_file2, file_name_2, ra_degrees, dec_sign * dec_degrees, header_2)

  return ra_degrees, dec_sign * dec_degrees